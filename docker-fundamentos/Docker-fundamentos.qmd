---
title: "Docker-fundamentos"
format:
  html:
    toc: true
---

# Curso de Docker: Fundamentos

## Fundamentos de Docker

**Docker**: Es una herramienta que te permite crear, gestionar y publicar contenedores  

### Diferencias entre Máquina virtuales, contenedores y servicios
- **Maquinas virtuales**: 
  - Aislamiento: Las VMs proporcionan un aislamiento completo, ya que ejecutan un sistema operativo completo independiente del host.
  - Recurso Intensivo: Las VMs pueden consumir más recursos, porque cada una tiene su propio sistema operativo y una cantidad significativa de recursos dedicados.
  - Arranque Más Lento: El arranque de una VM es más lento, puesto que implica iniciar un sistema operativo completo.
  - Hypervisor: Las VMs se ejecutan en un hipervisor, que gestiona y asigna recursos para cada máquina virtual.
  
- **Contenedores**: Son como habitaciones en una casa compartida. Comparten algunas instalaciones comunes, lo que los hace más ligeros y rápidos, pero tienen menos aislamiento que los apartamentos (VMs).
  - Aislamiento Ligero: Los contenedores comparten el mismo kernel del sistema operativo del host, lo que proporciona un aislamiento más ligero.
  - Eficiencia de Recursos: Los contenedores son más eficientes en términos de recursos, ya que comparten el mismo sistema operativo y solo incluyen las bibliotecas y dependencias necesarias.
  - Arranque Rápido: Los contenedores tienen un arranque rápido, por el hecho de que no requieren iniciar un sistema operativo completo.
  - Docker, Containerd, etc.: Docker es una de las tecnologías de contenedores más populares, y otras implementaciones incluyen containerd, rkt, etc.

Para poder revisar la funcion de Docker en terminal usamos el comando

```bash
docker --version
```

- Secciónes
  - Contenedores
  - Images
    - Locales
    - Remotas (Hub)
    - Artefactos (Artifactory)
  - Dev environments
  - Docker Scout
  - Volumenes

```bash
# Este comando sirve para saber la información del uso de hardware
docker info

# Nos da una lista de las imagenes creadas
docker images

# Nos da una lista de los contenedores
docker ps

# Podemos agregar --help para que nos de la documentación
docker ps --help

# Sirve para construir una imagen
docker build

# Para correr una imagen usamos
docker run
```
### Conociendo Docker CLI

```bash
# como saber la version de docker
docker --version

# documentación de docker
docker

# Saber toda la información de cuantos recursos usa
docker --info

# Ver todas las imagenes que he creado en dockers
docker images

# Para ver los contenedores de docker
docker ps

# documentación de los comandos en espesifico 
docker images --help

# Construir una imagen a partir de un Dockerfile
docker build -t <nombre_de_la_imagen>

```



## Creación de Imágenes con Docker
### Mi primera imagen de Docker
- Tu tienes una imagen en el archivo Dockerfile
- Despues le generas una imagen usando `docker build`
- Ya creada la image levantas el contenedor usando `docker run`

```bash
# Iniciar Dockerfile desde la carpeta de origen
docker build .

# Eliminar una imagen con su numero ID
docker rmi -f <IMAGE ID>

# Hacer un build y darle un nombre
docker build -t <nombre_de_la_imagen>:<nombre_del_tag> .
```

```bash
# Revisar si existe mi imagen en docker images
docker images

# Reviso si esta el contenedor
docker ps

# Correr el contenedor
docker run -it --rm -d -p 8080:80 --name <nombre_contenedor> <nombre_imagen>
```
- `-it`: Significa interactivo, por lo que sirve para ver la terminal de mi proyect
- `--rm`: Sirve para eliminar cualquier version del contenedor existente
- `-d`: Funcionamiento en segundo plano
-  `-p`: Parametro de puerto <puerto por el que entro a la aplicacion>:<puerto de comunicación>
-  `--name`: Dar nombre al contenedor

### Administración de imagenes

```bash
# Buscar una imagen en espesifico
docker images <nombre_imagen>

# filtrar imagenes
docker images --filter=reference='*:1.0'

# Actualizar un tag
docker images tag <nombre_imagen>:<nombre_tag> <nombre_imagen>:<nombre_tag>

# Eliminar imagenes
docker rmi <nombre_imagen>:<nombre_tag>
docker rmi <ID_IMAGES>

# Eliminación forzada
docker rmi -f <ID_IMAGES>

```
- No podemos eliminar una imagen que esta siendo ejecutada por un contenedor

### Administración de contenedores

```bash
# Lista completa de los contenedores
docker ps -a

# Ver el tamaño
docker ps --size

# Detener un contenedor
docker stop <CONTAINER ID>

# Ver rendimiento de Docker
docker stats
```
- No puedes tener 2 contenedores con el mismo nombre

## Volúmenes y Redes de Docker

### Volúmenes 

- Espacios compartidos entre el espacio local y docker
  - Es como si fuera una carpeta compartida
  - En ciencia de datos son importantes porque vas introduciendo cada vez mas datos

```bash
# Correr el contenedor
docker run -it --rm -d -p 8080:80 -v <carpeta_local>:<carpeta_en_el_contenedor> --name <nombre_contenedor> <nombre_imagen>
```

```dockerfile
# crear Volumen
VOLUME ["ruta/local","ruta/contenedor"]
```

### Redes

```bash
# ver las network de docker
docker network ls

# crear una red
docker network create <nombre_de_la_red>
```
- Categorias de redes
  - Bridge: por defecto
  - Host: coneccion exclusiva
  - none: sin coneccion
  - red_virtual:


## Publicando Imágenes de Docker


## Orquestación de Contenedores de Docker

