---
title: "Visualización de Datos con Matplotlib y Seaborn"
---

# Visualización de Datos con Matplotlib y Seaborn


## Pyplot básico (2/13)

```{python}
import numpy as np
import matplotlib.pyplot as plt
```

```{python}
x = np.linspace(0,5,11)
y = x**2
```

```{python}
plt.plot(x,y)
plt.show()
```

```{python}
# Roja con X
plt.plot(x,y, 'rx')
plt.show()
```

```{python}
# Roja con cuadros y con una linea
plt.plot(x,y, 'rs-')
plt.show()
```

```{python}
# Amarillo con diamantas y con una consecucion de puntos
plt.plot(x,y, 'yD:')
plt.show()
```

```{python}
# Un histograma
plt.hist(x)
plt.show()
```

```{python}
# Un grafico de Pie
plt.pie(x)
plt.show()
```

```{python}
# Un scatter plot 
plt.scatter(x,y)
plt.show()
```


```{python}
# Un boxplot
plt.boxplot(x)
plt.show()
```

## Subplot (3/13)

```{python}
import numpy as np
import matplotlib.pyplot as plt
```

```{python}
x = np.linspace(0,5,11)
y = x**2
```


```{python}
# 1 fila y 2 columnas
plt.subplot(1,2,1)
plt.plot(x,y,'r--')
plt.subplot(1,2,2)
plt.hist(y)
plt.show()
```


```{python}
plt.subplot(1,2,1)
plt.plot(x,y,'r--')
plt.plot(y,x,'b:')
plt.subplot(1,2,2)
plt.pie(y)
plt.show()
```


```{python}
plt.subplot(2,1,1)
plt.plot(x,y,'r--')
plt.plot(y,x,'b:')
plt.subplot(2,1,2)
plt.pie(y)
plt.show()
```



## Subplots (4/13)

```{python}
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0,5,11)
y = x**2
```


```{python}
fig, axes = plt.subplots()
axes.plot(x,y)
plt.show()
```


```{python}
# Varias gráficas tipo fig
fig, axes = plt.subplots(nrows=1, ncols=2) 
axes[0].plot(x,y,'b') 
axes[1].plot(y,x,'r') 
plt.show()
```

```{python}
# Acceder a los gráficos mediante el nombre
fig, (axes1, axes2) = plt.subplots(nrows=1, ncols=2) 
axes1.plot(x,y,'b') 
axes2.plot(y,x,'r') 
plt.show()
```

```{python}
# Generar una matriz de tipo fig
fig, axes = plt.subplots(2,4) 
#genera un trazo accediendo a las graficas a traves del indice de la matriz
axes[0,0].plot(x,y) 
axes[0,1].plot(y,x, 'r') 
fig.tight_layout() #mejora la visualización de los ejes de cada gráfico
```

```{python}
# Alternativa para generr una matriz de tipo fig
fig, ((axes1, axes2, axes3, axes4), (axes5, axes6, axes7, axes8)) = plt.subplots(2,4) 
axes1.plot(x, np.sin(x), 'b')
axes2.plot(y, np.cos(x), 'purple') 
axes3.plot(x, np.tan(y), 'orange') 
axes4.plot(y, np.cos(y)**2,'black') #mejorar la visualización de las figuras
fig.tight_layout()

```

## Leyendas, etiquetas, títulos, tamaño

```{python}
fig, (ax1,ax2) = plt.subplots(1,2) 
ax1.plot(x,y, 'b') 
ax2.plot(y,x, 'r') 
plt.show()
```

```{python}
# Contexto a los graficos con titulos
fig, (ax1,ax2) = plt.subplots(1,2) 
ax1.plot(x,y, 'b') 
ax1.set_title("Relacion X - Y") 
ax2.plot(y,x, 'r') 
ax2.set_title("Relacion Y - X")
```

```{python}
# Agregar labes en los ejes
fig, (ax1,ax2) = plt.subplots(1,2) 
ax1.plot(x,y, 'b', ) 
ax1.set_title("Relacion X - Y") 
ax1.set_xlabel("X") 
ax1.set_ylabel("Y") 
ax2.plot(y,x, 'r') 
ax2.set_title("Relacion Y - X") 
ax2.set_xlabel("Y") 
ax2.set_ylabel("X")
```

```{python}
# Cambiar el tamaño de las figuras
fig, (ax1,ax2) = plt.subplots(1,2, figsize= (10,10))
```

```{python}
# Aplicar etiquetas
fig, (ax1,ax2) = plt.subplots(1,2) 
ax1.plot(x,y, 'b', label = "sin(x)") 
ax1.set_title("Relacion X - Y") 
ax1.set_xlabel("X") 
ax1.set_ylabel("Y") 
ax1.legend()
```

```{python}
# Cambiando localización
fig, (ax1,ax2) = plt.subplots(1,2) 
ax1.plot(x,y, 'b', label = "sin(x)") 
ax1.set_title("Relacion X - Y") 
ax1.set_xlabel("X") 
ax1.set_ylabel("Y") 
ax1.legend(loc = "upper center")
plt.show()
```

## Colores y estilos

```{python}
print(plt.style.available)

# Estilo de grilla
plt.style.use('seaborn-whitegrid') 
```

```{python}
fig, ax = plt.subplots(figsize = (6,6))
ax.plot(x,x+1, 'r--')
ax.plot(x,x+2, 'bo-')
ax.plot(x,x+3, 'g.:')
ax.plot(x,x+4, 'purple')
```


```{python}
fig, ax = plt.subplots(figsize = (6,6))
ax.plot(x,x+1,color = '#D426C8') 
ax.plot(x,x+2,color = '#66FF89')
ax.plot(x,x+3,color = 'blue') 
ax.plot(x,x+4, color = 'black')
```


```{python}
fig, ax = plt.subplots(figsize = (6,6))
ax.plot(x,x+1,color = '#D426C8', alpha= 0.5, linewidth= 18)
ax.plot(x,x+2,color = '#66FF89', linewidth= 3)
ax.plot(x,x+3,color = 'blue', linewidth= 5)
ax.plot(x,x+4, color = 'black', alpha = 0.3, linewidth= 12)
```

```{python}
fig, ax = plt.subplots(figsize = (6,6))
ax.plot(x,x+3,color = 'blue', linestyle = 'dashed', marker = 'x')
ax.plot(x,x+4, color = 'black',linestyle = '--', marker = 'P')
```

```{python}
fig, ax = plt.subplots(figsize = (6,6))
ax.plot(x,x+3,color = 'blue', linestyle = 'dashed', marker = '8', markersize = 10, markerfacecolor= "#37D842")

ax.plot(x,x+4, color = 'black',linestyle = '--', marker = 'P', markerfacecolor="#FF0000")
```

## Bar plot

```{python}
# Importamos librerías
import matplotlib.pyplot as plt
import numpy as np
```

```{python}
# Variables categóricas
countrys = ["INDIA", "JAPAN", "MEXICO", "COLOMBIA", "GERMANY"]
population = [5000, 800, 900, 1000, 300]
```


```{python}
# Gráfica de barras
plt.bar(countrys,population)
plt.show()
```


```{python}
# Modificar colores y tamaño
plt.bar(countrys,population,  
    width=0.5, 
    color= ["aqua", "grey", "teal", "crimson", "violet"])
plt.show()
```

```{python}
# Modificar los nombres de las variables en eje X con xticks
plt.bar(countrys,population,
    width=0.5, 
    color= ["aqua", "grey", "teal", "crimson", "violet"])
plt.xticks(np.arange(5), 
    ('India','Japon', 'Mexico', 'Colombia', 'Alemania'), 
    rotation = 45)
plt.show()
```

```{python}
# Crear un gráfico de manera horizonta con barh
plt.barh(countrys, population)
plt.show()
```

## Crear otro tipo de gráficas

### Histogramas

```{python}
# Datos
data = np.random.randint(1,50,100)
```

```{python}
# Crear histograma
plt.hist(data) 
plt.show()
```

```{python}
# Número de barras con bins
plt.hist(data, bins=50) 
plt.show()
```


```{python}
# Cambiar estilo
plt.hist(data, bins=30, histtype='step') 
plt.show()
```

### Boxplot

```{python}
# Crear un gráfico tipo Boxplot
plt.boxplot(data) #Muestra rango intercuartil y la mediana 
plt.show()
```


```{python}
# Cambiar dirección, rellenar rango inter cuartil `patch_artist`
# y enfocar la mediana `notch`
plt.boxplot(data, vert=False, patch_artist=True, notch=True) 
plt.show()
```

```{python}
# Quitar Outliers `showfliers`
data = np.append(data, 200) 
plt.boxplot(data, 
    vert=False, 
    patch_artist=True,
    notch=True, 
    showfliers=True) # Usando showfliers=False no vemos los outliers
plt.show()
```

### Scatter plot

```{python}
print(plt.style.available)

# Estilo de grilla
plt.style.use('Solarize_Light2')
```

```{python}
# Cargamos datos
N = 50 
x = np.random.rand(N) 
y = np.random.rand(N) 
area = (30 * np.random.rand(N)) **2 
colors = np.random.rand(N)
```
```{python}
# Scatter con Área
plt.scatter(x,y, s=area) 
plt.show()
```

```{python}
# Color y marker
plt.scatter(x,y, s=area, c= colors, marker = 'v') # cambiar el marker 
plt.show()
```


```{python}
# Transparencia para ver los superpuestos
plt.scatter(x,y, s=area, c= colors, marker = 'o', alpha= 0.5) # transparencia
plt.show()
```

## Seaborn

### Set - set_theme

```{python}
import seaborn as sns
import matplotlib.pyplot as plt
```

```{python}
sns.set(style='darkgrid')
sns.barplot(x=['A','B', 'C'], y=[1,3,2])
plt.show()
```

```{python}
sns.set_theme(style='dark', palette='dark', font="sans-serif", font_scale= 1)
sns.barplot(x=['A','B', 'C'], y=[1,3,2])
plt.show()
```

###  Parametros 

```{python}
tips = sns.load_dataset('tips')
```

```{python}
tips.head()
```

```{python}
# Histograma
sns.displot(
    data=tips,
    x='total_bill'
)
```


```{python}
# Crea un heatmap
sns.displot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='sex'
)
```

```{python}
# Hue sirve para segmentar
sns.displot(
    data=tips,
    x='total_bill',
    hue='sex')
```


```{python}
# KDE por dencidad
sns.displot(
    data=tips,
    x='total_bill',
    hue='sex',
    kind='kde',
    legend=True,
    palette='dark',
    alpha=0.2
)
```

### Distribuciones

#### Histograma

```{python}
# Histograma
sns.histplot(
    data=tips, 
    x='tip',
    bins=10
)
plt.show()
```

```{python}
# Histograma acumulado usando probabilidad
sns.histplot(
    data=tips, 
    x='tip',
    bins=20,
    hue='sex',
    cumulative=True,
    stat='probability'
)
plt.show()
```


```{python}
# Histograma con porcentajes
sns.histplot(
    data=tips, 
    x='tip',
    bins=20,
    hue='sex',
    stat='percent'
)
plt.show()
```


```{python}
# Histograma con porcentajes
sns.histplot(
    data=tips, 
    x='tip',
    bins=20,
    hue='sex',
    stat='count',
    multiple='dodge' # stack, dodge, fill
)
plt.show()
```


#### Densidad

```{python}
sns.kdeplot(
    data=tips,
    x='tip',
    hue='sex',
    cumulative=False,
    fill=True,
    bw_adjust=1
)
```

#### ECD

```{python}
sns.ecdfplot(
    data=tips,
    x='tip',
    hue='sex',
    stat='count'
)
```

#### Displot

```{python}
sns.displot(
    data=tips,
    x='tip',
    hue='sex',
    kind='hist', # hist, ecd, etc.
    multiple='stack',
    kde=True
)
```


## Categóricos

```{python}
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
```

```{python}
tips = sns.load_dataset('tips')
tips.head() 
```

```{python}
sns.countplot(data=tips,x='day',hue='sex')
plt.show()
```

```{python}
sns.countplot(data=tips,y='day',hue='sex')
plt.show()
```

```{python}
plt.figure(figsize=(8,6))
sns.stripplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex',
                dodge=True)
plt.show()
```

```{python}
plt.figure(figsize=(8,6))
sns.swarmplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex',
                dodge=True)
plt.show()
```

```{python}
plt.figure(figsize=(10,6))
sns.boxplot(data=tips, 
                y='total_bill', 
                hue='sex',
                dodge=True)
plt.show()
```

```{python}
plt.figure(figsize=(10,6))
sns.boxplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex',
                dodge=True)
plt.show()
```
```{python}
plt.figure(figsize=(10,6))
sns.boxplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex',
                dodge=True)
sns.swarmplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex',
                dodge=True,
                palette='dark:0',
                marker='X')
plt.show()
```

```{python}
plt.figure(figsize=(10,6))
sns.violinplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex',
                dodge=True,
                split=True,
                palette='pastel')
plt.show()
```

```{python}
plt.figure(figsize=(10,4))
sns.catplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex')
plt.show()
```
```{python}
plt.figure(figsize=(10,4))
sns.catplot(data=tips, 
                x='day', 
                y='total_bill', 
                hue='sex',
                kind='box',
                col='time')
plt.show()
```


## Relation

```{python}
sns.scatterplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='day',
    style='time',
    size='size'
)
plt.legend(loc='center', bbox_to_anchor=(1.12,0.5))
plt.show()
```

```{python}
plt.figure(figsize=(8,8))
marker = {'Lunch':'D', "Dinner":'s'}
sns.scatterplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='day',
    style='time',
    size='size',
    markers=marker
)
plt.legend(loc='center', bbox_to_anchor=(1.12,0.5))
plt.show()
```

```{python}
sns.lineplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='day',
    style='time',
    size='size',
)
plt.legend(loc='center', bbox_to_anchor=(1.12,0.5))
plt.show()
```

```{python}
sns.relplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='day',
    style='time',
    size='size',
    col='time'
)
```

## Joinplot y Pairplot

```{python}
sns.jointplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='sex'
)
```

```{python}
sns.jointplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='sex',
    kind='hist',
    marginal_ticks=True
)
```


```{python}
sns.jointplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='sex',
    kind='kde'
)
```

```{python}
sns.jointplot(
    data=tips,
    x='total_bill',
    y='tip',
    hue='sex',
    kind='hist',
    marginal_ticks=True,
    marginal_kws=dict(bins=25, fill=False, multiple='dodge'),
)
```

```{python}
sns.pairplot(
    data=tips,
    hue='sex',
    palette='dark',
    corner=True,
    kind='scatter'
)
plt.show()
```


## Heatmap


```{python}
tips.corr()
```


```{python}
sns.heatmap(
    tips.corr(),
    annot=True,
    cmap='coolwarm_r',
    linewidths=1,
    #linecolor='black',
    vmin=-1, 
    vmax=1,
    #cbar=True
)
plt.show()
```




```{python}
mask = np.triu(np.ones_like(tips.corr()))
sns.heatmap(
    tips.corr(),
    annot=True,
    cmap='YlGnBu',
    mask=mask
)
plt.show()
```